package org.trippi.impl.oracle;import java.sql.Connection;import java.sql.DriverManager;import java.util.HashMap;import java.util.Map;import java.util.Properties;import oracle.jdbc.pool.OracleOCIConnectionPool;import org.jrdf.graph.GraphElementFactory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.trippi.TriplestoreConnector;import org.trippi.TriplestoreReader;import org.trippi.TriplestoreWriter;import org.trippi.TrippiException;import org.trippi.config.ConfigUtils;import org.trippi.impl.base.AliasManager;import org.trippi.impl.base.ConcurrentTriplestoreWriter;import org.trippi.impl.base.MemUpdateBuffer;import org.trippi.impl.base.SingleSessionPool;import org.trippi.impl.base.TriplestoreSessionPool;import org.trippi.impl.base.UpdateBuffer;/** * A <code>TriplestoreConnector</code> for a remote or local, Oracle Spatial * Triple Store. *  * @author liberman@case.edu * @created June 26, 2006 */public class OracleConnector extends TriplestoreConnector {	private static final Logger logger =        LoggerFactory.getLogger(OracleConnector.class.getName());	private ConcurrentTriplestoreWriter m_writer;		private Map<String,String> m_config;		private Properties m_poolConfig;	//private GraphElementFactory m_elementFactory;	/**	 *Constructor for the OracleConnector object	 */	public OracleConnector() {	}	/**	 * @deprecated	 * @see org.trippi.TriplestoreConnector#init(Map) 	 * @param config	 *            Description of the Parameter	 * @exception TrippiException	 *                Description of the Exception	 */	@Deprecated	@Override	public void init(Map<String,String> config) throws TrippiException {		setConfiguration(config);	}		/**	 * @see org.trippi.TriplestoreConnector#setConfiguration(Map) 	 */	@Override	public void setConfiguration(Map<String,String> config) throws TrippiException {		// Get and validate configuration		// Required parameters		Map<String,String> validated = new HashMap<String,String>(config);		validated.put("jdbcUrl", ConfigUtils.getRequired(config, "jdbcUrl"));		validated.put("user", ConfigUtils.getRequired(config, "user"));		validated.put("password", ConfigUtils.getRequired(config, "password"));		validated.put("RDFSchemaName", ConfigUtils.getRequired(config,"RDFSchemaName"));		int autoFlushDormantSeconds = ConfigUtils.getRequiredNNInt(config,				"autoFlushDormantSeconds");		validated.put("autoFlushDormantSeconds", Integer.toString(autoFlushDormantSeconds));		int autoFlushBufferSize = ConfigUtils.getRequiredPosInt(config, "autoFlushBufferSize");		validated.put("autoFlushBufferSize", Integer.toString(autoFlushBufferSize));				int bufferSafeCapacity = ConfigUtils.getRequiredInt(config, "bufferSafeCapacity");		if (bufferSafeCapacity < autoFlushBufferSize + 1) {			throw new TrippiException(					"bufferSafeCapacity must be greater than autoFlushBufferSize.");		}		validated.put("bufferSafeCapacity", Integer.toString(bufferSafeCapacity));		int bufferFlushBatchSize = ConfigUtils.getRequiredNNInt(config,		"bufferFlushBatchSize");		if (bufferFlushBatchSize > autoFlushBufferSize) {			throw new TrippiException(					"bufferFlushBatchSize must be less than or equal to autoFlushBufferSize.");		}		validated.put("bufferFlushBatchSize", Integer.toString(bufferFlushBatchSize));				Properties poolConfig = new Properties();		poolConfig.put(OracleOCIConnectionPool.CONNPOOL_MIN_LIMIT,				ConfigUtils.getRequired(config, "PoolConnectionMinLimit"));		poolConfig.put(OracleOCIConnectionPool.CONNPOOL_MAX_LIMIT,				ConfigUtils.getRequired(config, "PoolConnectionMaxLimit"));		poolConfig.put(OracleOCIConnectionPool.CONNPOOL_INCREMENT,				ConfigUtils.getRequired(config, "PoolConnectionIncrement"));		poolConfig.put(OracleOCIConnectionPool.CONNPOOL_NOWAIT, "false");		// Must wait for next conncetion to free up.		poolConfig.put(OracleOCIConnectionPool.CONNPOOL_TIMEOUT,				ConfigUtils.getRequired(config, "PoolConnectionTimeOut"));		m_poolConfig = poolConfig;		m_config = validated;	}		@Override	public Map<String, String> getConfiguration(){		return m_config;	}		public void open() throws TrippiException {    	if (m_config == null){    		throw new TrippiException("Cannot open " + getClass().getName() + " without valid configuration");    	}		String jdbcUrl = m_config.get("jdbcUrl");		String user = m_config.get("user");		String password = m_config.get("password");		String RDFSchemaName = m_config.get("RDFSchemaName");		int autoFlushDormantSeconds = Integer.parseInt(m_config.get("autoFlushDormantSeconds"));		int autoFlushBufferSize = Integer.parseInt(m_config.get("autoFlushBufferSize"));		int bufferSafeCapacity = Integer.parseInt(m_config.get("bufferSafeCapacity"));		int bufferFlushBatchSize = Integer.parseInt(m_config.get("bufferFlushBatchSize"));		// Initialize appropriate Oracle Repository		Connection repository;		try {			DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());			repository = DriverManager.getConnection(jdbcUrl, user, password);			// Connect to oracle			/*			 * repository = new OracleOCIConnectionPool(user, password, jdbcUrl,			 * poolConfig);			 */		} catch (Exception e) {			throw new TrippiException("Failed to initialize Oracle repository",					e);		}		try {			AliasManager aliasManager = new AliasManager(new HashMap<String, String>());						OracleSession session = new OracleSession(repository, aliasManager,					RDFSchemaName);			//m_elementFactory = session.getElementFactory();			TriplestoreSessionPool sessionPool = new SingleSessionPool(session,					OracleSession.TUPLE_LANGUAGES,					OracleSession.TRIPLE_LANGUAGES);			UpdateBuffer updateBuffer = new MemUpdateBuffer(bufferSafeCapacity,					bufferFlushBatchSize);			m_writer = new ConcurrentTriplestoreWriter(sessionPool,					aliasManager, session, updateBuffer, autoFlushBufferSize,					autoFlushDormantSeconds);			m_writer.setCacheDeletes(true);		} catch (Exception e) {			throw new TrippiException(					"Failed to initialize Trippi interface to Oracle repository",					e);		}	}	/**	 * Gets the reader attribute of the OracleConnector object	 * 	 * @return The reader value	 */	@Override	public TriplestoreReader getReader() {		if (m_writer == null){			try{				open();			}			catch (TrippiException e) {				logger.error(e.toString(),e);			}		}		return m_writer;	}	/**	 * Gets the writer attribute of the OracleConnector object	 * 	 * @return The writer value	 */	@Override	public TriplestoreWriter getWriter() {		if (m_writer == null){			try{				open();			}			catch (TrippiException e) {				logger.error(e.toString(),e);			}		}		return m_writer;	}	/**	 * Gets the elementFactory attribute of the OracleConnector object	 * 	 * @return The elementFactory value	 */	@Override	public GraphElementFactory getElementFactory() {		return null;		// m_elementFactory;	}	/**	 * Description of the Method	 * 	 * @exception TrippiException	 *                Description of the Exception	 */	@Override	public void close() throws TrippiException {		m_writer.close();	}}