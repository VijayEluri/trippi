Index: src/jar/store-stringpool/java/org/mulgara/store/stringpool/xa/SPDateTimeImpl.java
===================================================================
--- src/jar/store-stringpool/java/org/mulgara/store/stringpool/xa/SPDateTimeImpl.java	(revision 535)
+++ src/jar/store-stringpool/java/org/mulgara/store/stringpool/xa/SPDateTimeImpl.java	(working copy)
@@ -99,12 +99,21 @@
     this(new Date(l));
   }
 
-
+  /**
+   * Static factory method for SPDateTimeImpl.
+   * @param lexicalForm canonical representation of XSD dateTime, e.g.
+   *        "2006-11-13T09:40:55.001Z".
+   * @return <code>SPDateTimeImpl</code>
+   */
   static SPDateTimeImpl newInstance(String lexicalForm) {
 
     StringBuffer sb = new StringBuffer(lexicalForm);
-    int pos = sb.length() - 4;
+    if (sb.charAt(sb.length() -1) == 'Z') {
+        sb.deleteCharAt(sb.length() -1); // temporarily drop the trailing "Z"
+    }
+    int pos = sb.length() - 4; // e.g. ".123"
     int index = sb.indexOf(".", pos);
+    // Normalize lexicalForm to match XSD.DATE_TIME_FORMAT
     if (index == -1) {
       sb.append(".000");
     }
@@ -109,7 +118,7 @@
       sb.append(".000");
     }
     else {
-      if (index == sb.length() - 1) {
+      if (index == sb.length() - 1) { // e.g. dateTime ending "00."
         throw new IllegalArgumentException("Cannot parse date: " + lexicalForm);
       }
       int pad = pos - index;
@@ -118,7 +127,9 @@
         pad++;
       }
     }
+    sb.append("Z");
     lexicalForm = sb.toString();
+
     try {
       Date date = DateParser.parse(lexicalForm, XSD.DATE_TIME_FORMAT,
           Locale.getDefault());
@@ -144,11 +155,10 @@
   }
 
   /**
-   * Returns the lexical form of the XSD dateTime value according to
-   * "3.2.7.2 Canonical representation" of
+   * Returns the timezoned (UTC) lexical form of the XSD dateTime value 
+   * according to "3.2.7.2 Canonical representation" of
    * http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/
    * with the following exceptions:
-   * - Timezones are not supported
    * - Dates before 1 CE (i.e. 1 AD) are handled according to ISO 8601:2000
    *   Second Edition:
    *     "0000" is the lexical representation of 1 BCE
@@ -153,7 +163,8 @@
    *   Second Edition:
    *     "0000" is the lexical representation of 1 BCE
    *     "-0001" is the lexical representation of 2 BCE
-   * @return the lexical form of the XSD dateTime value
+   * @return the lexical form of the XSD dateTime value, e.g. 
+   *         "2006-11-13T09:40:55.001Z".
    */
   public String getLexicalForm() {
     return XSD.getLexicalForm(date);

