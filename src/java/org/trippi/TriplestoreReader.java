package org.trippi;

import java.util.Map;

import org.jrdf.graph.ObjectNode;
import org.jrdf.graph.PredicateNode;
import org.jrdf.graph.SubjectNode;

/**
 * An interface to an RDF store that provides query and dump access.
 *
 * @author cwilper@cs.cornell.edu
 */
public interface TriplestoreReader {

    /**
     * Set the default alias map for queries.
     */
    public void setAliasMap(Map aliasToPrefix) throws TrippiException;

    /**
     * Get the default alias map for queries.
     */
    public Map getAliasMap() throws TrippiException;

    /**
     * Perform a tuple query on the store and return an iterator over the
     * tuples.
     *
     * @param  queryLang   the query language
     * @param  tupleQuery  the text of the query
     */
    public TupleIterator findTuples(String queryLang,
                                    String tupleQuery,
                                    int limit,
                                    boolean distinct) throws TrippiException;

    /**
     * Get the number of tuples that would be returned via findTuples.
     */
    public int countTuples(String queryLang,
                           String tupleQuery,
                           int limit,
                           boolean distinct) throws TrippiException;

    /**
     * Perform a triple query on the store in a specific language.
     * <p>
     * Implementations must support the "spo" query language, where a query
     * consists of a single triple pattern with any number of components 
     * unspecified, as indicated by an asterisk.
     * </p><p>
     * The following example calls demonstrate the syntax of the "spo" query
     * language.
     * </p><pre>
     *     // Match with three fixed values
     *     findTriples("spo", "&lt;urn:uri1&gt; &lt;urn:uri2&gt; &lt;urn:uri3&gt;");
     *     findTriples("spo", "&lt;urn:uri1&gt; &lt;urn:uri2&gt; 'Hello'");
     *     findTriples("spo", "&lt;urn:uri1&gt; &lt;urn:uri2&gt; 'Hola'@es");
     *     findTriples("spo", "&lt;urn:uri1&gt; &lt;urn:uri2&gt; '10'^^xsd:int");
     *
     *     // Match with one fixed value
     *     findTriples("spo", "&lt;urn:uri1&gt; * *");
     *     findTriples("spo", "* &lt;urn:uri2&gt; *");
     *     findTriples("spo", "* * &lt;urn:uri3&gt;");
     *
     *     // Match with two fixed values
     *     findTriples("spo", "* &lt;urn:uri2&gt; &lt;urn:uri3&gt;");
     *     findTriples("spo", "&lt;urn:uri1&gt; * &lt;urn:uri3&gt;");
     *     findTriples("spo", "&lt;urn:uri1&gt; &lt;urn:uri2&gt; *");
     *
     *     // Match everything
     *     findTriples("spo", "* * *");
     * </pre>
     *
     * @param  queryLang   the query language
     * @param  tupleQuery  the text of the query
     */
    public TripleIterator findTriples(String queryLang,
                                      String tupleQuery,
                                      int limit,
                                      boolean distinct) throws TrippiException;

    /**
     * Get the number of triples that would be returned via findTriples.
     */
    public int countTriples(String queryLang,
                            String tupleQuery,
                            int limit,
                            boolean distinct) throws TrippiException;

    /**
     * Perform a triple query on the store given a triple pattern where <code>null</code>
     * means "any".
     */
    public TripleIterator findTriples(SubjectNode subject,
                                      PredicateNode predicate,
                                      ObjectNode object,
                                      int limit) throws TrippiException;

    /**
     * Get the number of triples that would be returned via findTriples.
     */
    public int countTriples(SubjectNode subject,
                            PredicateNode predicate,
                            ObjectNode object,
                            int limit) throws TrippiException;



    /**
     * Perform a tuple query on the store and return an iterator over the
     * triples generated by applying the given triple template to the tuples.
     * <p>
     * A triple template is a series of triple patterns used to generate
     * a graph from a group of tuples.  See the <code>TriplePattern</code> 
     * documentation for more detail.
     * </p>
     * @param  queryLang      the query language
     * @param  tupleQuery     the text of the query
     * @param  tripleTemplate the template used to construct the triples
     * @see    org.trippi.TriplePattern
     */
    public TripleIterator findTriples(String queryLang,
                                      String tupleQuery,
                                      String tripleTemplate,
                                      int limit,
                                      boolean distinct) throws TrippiException;

    /**
     * Get the number of triples that would be returned via findTriples.
     */
    public int countTriples(String queryLang,
                            String tupleQuery,
                            String tripleTemplate,
                            int limit,
                            boolean distinct) throws TrippiException;

    /**
     * List the supported query languages that return tuples.
     */
    public String[] listTupleLanguages(); 

    /**
     * List the supported query languages that return triples.
     */
    public String[] listTripleLanguages(); 

    /**
     * Close the reader, releasing any resources.
     */
    public void close() throws TrippiException;

}
