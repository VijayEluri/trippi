Index: src/jar/query/java/org/mulgara/query/rdf/XSD.java
===================================================================
--- src/jar/query/java/org/mulgara/query/rdf/XSD.java	(revision 535)
+++ src/jar/query/java/org/mulgara/query/rdf/XSD.java	(working copy)
@@ -158,7 +158,7 @@
    *
    * This is a highly abbreviated version of ISO 8601.
    */
-  public final static String DATE_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS";
+  public final static String DATE_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
 
   /**
    * Date format used by <code>xsd:gYear</code>.
@@ -182,11 +182,10 @@
   }
 
   /**
-   * Returns the lexical form of the XSD dateTime value according to
-   * "3.2.7.2 Canonical representation" of
+   * Returns the timezoned (UTC) lexical form of the XSD dateTime value 
+   * according to "3.2.7.2 Canonical representation" of
    * http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/
    * with the following exceptions:
-   * - Timezones are not supported
    * - Dates before 1 CE (i.e. 1 AD) are handled according to ISO 8601:2000
    *   Second Edition:
    *     "0000" is the lexical representation of 1 BCE
@@ -191,7 +190,8 @@
    *   Second Edition:
    *     "0000" is the lexical representation of 1 BCE
    *     "-0001" is the lexical representation of 2 BCE
-   * @return the lexical form of the XSD dateTime value
+   * @return the lexical form of the XSD dateTime value, e.g. 
+   *         "2006-11-13T09:40:55.001Z".
    */
   public static String getLexicalForm(Date date) {
     StringBuffer lexicalForm;
@@ -197,7 +197,7 @@
     StringBuffer lexicalForm;
     String dateTime = DateFormatter.formatDate(date, XSD.DATE_TIME_FORMAT,
         Locale.getDefault());
-    int len = dateTime.length();
+    int len = dateTime.length() - 1;
     if (dateTime.indexOf('.', len - 4) != -1) {
       while (dateTime.charAt(len - 1) == '0') {
         len--;
@@ -206,6 +206,7 @@
         len--;
       }
       lexicalForm = new StringBuffer(dateTime.substring(0, len));
+      lexicalForm.append('Z');
     }
     else {
       lexicalForm = new StringBuffer(dateTime);

