<?xml version="1.0" encoding="UTF-8"?>
<project name="trippi" default="dist" basedir=".">

  <property environment="env"/>

  <loadproperties srcFile="build.properties" /> 
  <loadproperties srcFile="lib/lib.properties" />
  <loadproperties srcFile="${src.dir}/java/org/trippi/Trippi.properties"/>
  <import file="${src.dir}/build/definitions.xml"/>
  <import file="${src.dir}/build/dependencies.xml"/>
  <import file="${src.dir}/build/macros.xml"/>

  <!-- core-classes -->
  <target name="core-classes" 
          description="build core classes">
  	<mkdir dir="${core.build.dir}"/>
    <javac classpathref="core.compile.classpath"
                   destdir="${core.build.dir}"
    	           srcdir="src/java"
                   includes="${top.packagepath}/*,
                             ${top.packagepath}/config/**,
                             ${top.packagepath}/nodegraph/**,
                             ${top.packagepath}/io/**,
                             ${impl.packagepath}/base/**,
                             ${impl.packagepath}/multi/**,
                             ${top.packagepath}/server/**,
                             ${top.packagepath}/ui/**"/>
    <copy-resources packagepath="${top.packagepath}" 
                    destdir="${core.build.dir}"/>
    <propertyfile file="build/version.properties">
      <entry key="buildDate" type="date" value="now"/>
    </propertyfile>
    <replace file="${core.build.dir}/org/trippi/Trippi.properties"
             value="value not found in version.properties"
             propertyFile="build/version.properties">
      <replacefilter token="@buildDate@" property="buildDate"/>
    </replace>
  </target>

  <!-- mptstore-classes -->
  <target name="mptstore-classes" depends="core-classes">
    <build-connector classpathref="mptstore.compile.classpath"
                     destdir="${mptstore.build.dir}"
                     packagepath="${mptstore.packagepath}"/>
  </target>
	
  <!-- mulgara-classes -->
  <target name="mulgara-classes" depends="core-classes">
    <build-connector classpathref="mulgara.compile.classpath"
                     destdir="${mulgara.build.dir}"
                     packagepath="${mulgara.packagepath}"/>
  </target>

  <!-- oracle-classes -->
  <target name="oracle-classes" depends="core-classes">
    <build-connector classpathref="oracle.compile.classpath"
                     destdir="${oracle.build.dir}"
                     packagepath="${oracle.packagepath}"/>
  </target>

  <!-- sesame-classes -->
  <target name="sesame-classes" depends="core-classes">
      <!--
    <build-connector classpathref="sesame.compile.classpath"
                     destdir="${sesame.build.dir}"
                     packagepath="${sesame.packagepath}"/>
                     -->
  </target>

  <!-- connector-classes -->
  <target name="connector-classes"
          description="build all connector classes"
          depends="mptstore-classes,
  				   mulgara-classes,
                   oracle-classes,
                   sesame-classes">
  </target>

  <!-- test-classes -->
  <target name="test-classes"
          description="build all test classes"
          depends="core-classes,
                   connector-classes">
  	<mkdir dir="${test.build.dir}"/>
    <javac classpathref="test.compile.classpath"
                  destdir="${test.build.dir}"
                  includes="${top.packagepath}/**"
                  srcdir="src/test"/>
  </target>

  <!-- core-jar -->
  <target name="core-jar"
          depends="core-classes"
          description="build core jar">
    <build-jar basedir="${core.build.dir}" 
               component="core" 
               mainclass="org.trippi.Trippi"/>
  </target>

  <!-- connector-jars -->
  <target name="connector-jars"
          depends="connector-classes"
          description="build jars for all connectors">
    <build-jar basedir="${mptstore.build.dir}" component="mptstore"/>
  	<build-jar basedir="${mulgara.build.dir}" component="mulgara"/>
  	<build-jar basedir="${oracle.build.dir}" component="oracle"/>
      <!--
    <build-jar basedir="${sesame.build.dir}" component="sesame"/>
    -->
  </target>

  <target name="test-prep"
          depends="test-classes">
    <copy todir="${test.build.dir}">
      <fileset dir="src/test" excludes="**/*.java"/>
    </copy>
  </target>

  <!-- unit-test -->
  <target name="unit-test"
          depends="test-classes,test-prep"
          description="run all unit tests">
    <junit printsummary="no" 
           haltonfailure="yes" 
           showoutput="true" 
           filtertrace="true">
      <formatter type="plain" usefile="false"/>
      <classpath refid="test.runtime.classpath"/>
      <sysproperty key="test.dir" value="${test.build.dir}"/>
      <test name="${unit.test}"/>
    </junit>
  </target>

  <!-- integration-test -->
  <target name="integration-test"
          depends="test-classes,test-prep"
          description="run all integration tests">
    <junit printsummary="no" 
           haltonfailure="yes" 
           showoutput="true" 
           filtertrace="true">
      <formatter type="plain" usefile="false"/>
      <classpath refid="test.runtime.classpath"/>
      <sysproperty key="test.dir" value="${test.build.dir}"/>
      <test name="org.trippi.TrippiIntegrationTestSuite"/>
    </junit>
  </target>

  <!-- test -->
  <target name="test"
          depends="unit-test,
                   integration-test"
          description="run all unit and integration tests">
  </target>

  <!-- core-dist -->
  <target name="core-dist"
          depends="core-jar"
          description="build core dist">
    <copy-jar component="core" todir="${dist.dir}/lib"/>
    <copy todir="${dist.dir}">
      <fileset dir="." includes="${core.runtime.libs}"/>
      <fileset dir="src" includes="config/"/>
      <fileset dir="src" includes="samples/"/>
      <fileset dir="src/bin"/>
    </copy>
  </target>

  <!-- dist -->
  <target name="dist"
          depends="core-dist,
                   connector-jars"
          description="build dist with all connectors">
    <copy-jar component="mptstore" todir="${dist.dir}/lib"/>
  	<copy-jar component="mulgara" todir="${dist.dir}/lib"/>
    <copy-jar component="oracle" todir="${dist.dir}/lib"/>
    <!--<copy-jar component="sesame" todir="${dist.dir}/lib"/>-->
    <copy todir="${dist.dir}">
      <fileset dir="." includes="${mptstore.runtime.libs}"/>
	  <fileset dir="." includes="${mulgara.runtime.libs}"/>
      <fileset dir="." includes="${oracle.runtime.libs}"/>
      <fileset dir="." includes="${sesame.runtime.libs}"/>
    </copy>
  </target>

  <!-- srcrelease -->
  <target name="srcrelease" 
          description="Build the source release in dist/release">
    <copy todir="dist/release/trippi-${trippi.version}-src">
      <fileset dir=".">
        <exclude name="build/**"/>
        <exclude name="dist/**"/>
        <exclude name="${lib.oracle-jdbc}"/>
      </fileset>
    </copy>
    <replace file="dist/release/trippi-${trippi.version}-src/README.txt"
             value="[trippi.version not found in Trippi.properties]"
             propertyFile="src/java/org/trippi/Trippi.properties">
      <replacefilter token="@trippi.version@" property="trippi.version"/>
    </replace>
    <zip zipfile="dist/release/trippi-${trippi.version}-src.zip" 
         basedir="dist/release" 
         includes="trippi-${trippi.version}-src/**"/>
    <delete dir="dist/release/trippi-${trippi.version}-src"/>
  </target>

  <!-- binrelease -->
  <target name="binrelease" 
          description="Build the binary release in dist/release"
          depends="dist,doc">
    <copy todir="dist/release/trippi-${trippi.version}">
      <fileset dir="dist">
        <exclude name="release/**"/>
        <exclude name="${lib.oracle-jdbc}"/>
      </fileset>
    </copy>
    <zip zipfile="dist/release/trippi-${trippi.version}.zip" 
         basedir="dist/release" 
         includes="trippi-${trippi.version}/**"/>
    <delete dir="dist/release/trippi-${trippi.version}"/>
  </target>

  <!-- release -->
  <target name="release" 
          depends="clean,test,srcrelease,binrelease" 
          description="Build the source and binary releases in dist/release">
    <checksum fileext=".md5">
      <fileset dir="dist/release">
        <include name="*.zip"/>
      </fileset>
    </checksum>
  </target>

  <!-- doc -->
  <target name="doc"
          description="Build all documentation in dist/doc">
    <copy todir="dist/doc">
      <fileset dir="src/doc"/>
    </copy>
    <replace file="dist/doc/index.html"
             value="[trippi.version not found in Trippi.properties]"
             propertyFile="src/java/org/trippi/Trippi.properties">
      <replacefilter token="@trippi.version@" property="trippi.version"/>
    </replace>
    <javadoc packagenames="org.trippi, 
                           org.trippi.config,
                           org.trippi.impl.base,
                           org.trippi.impl.mpt,
    					   org.trippi.impl.mulgara,
                           org.trippi.impl.oracle,
                           org.trippi.impl.sesame,
                           org.trippi.io,
                           org.trippi.nodegraph,
                           org.trippi.server,
                           org.trippi.server.http,
                           org.trippi.ui"
             classpathref="test.common.classpath"
             sourcepath="src/java"
             defaultexcludes="yes"
             destdir="dist/doc/api"
             windowtitle="Trippi ${trippi.version} Java API">
        <doctitle><![CDATA[<h1>Trippi ${trippi.version} Java API</h1>]]></doctitle>
    </javadoc>
  </target>

  <!-- clean -->
  <target name="clean" description="remove all build-generated stuff">
    <delete dir="${build.dir}"/>
    <delete dir="dist" />
  </target>

</project>
